<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Active Rooms - Zoomify</title>
    <link rel="stylesheet" href="/styles/navbar.css">
    <style>
        :root[data-theme="light"] {
            --primary-color: #4a90e2;
            --secondary-color: #f8f9fa;
            --accent-color: #7c4dff;
            --text-color: #333;
            --bg-color: #ffffff;
            --gradient: linear-gradient(135deg, #4a90e2, #7c4dff);
        }

        :root[data-theme="dark"] {
            --primary-color: #64b5f6;
            --secondary-color: #1a1a1a;
            --accent-color: #9575cd;
            --text-color: #ffffff;
            --bg-color: #121212;
            --gradient: linear-gradient(135deg, #1a1a1a, #2d2d2d);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            min-height: 100vh;
            background: var(--gradient);
            color: var(--text-color);
        }

        .container {
            margin-top: 80px; /* Add margin for navbar */
            max-width: 800px;
            margin: 40px auto;
            padding: 20px;
        }

        .header {
            background: var(--bg-color);
            color: var(--text-color);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        h1 {
            margin: 0;
            color: var(--primary-color);
        }

        .rooms-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .room-card {
            background: var(--bg-color);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.3s;
            cursor: pointer;
            color: var(--text-color);
        }

        .room-card:hover {
            transform: translateY(-5px);
        }

        .room-info {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

        .participants-count {
            background: var(--hover-bg);
            color: var(--text-color);
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.9em;
        }

        .back-link {
            background: #4a90e2;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            text-decoration: none;
            transition: background-color 0.3s;
        }

        .back-link:hover {
            background: #357abd;
        }

        .no-rooms {
            text-align: center;
            background: var(--bg-color);
            color: var(--text-color);
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .join-link {
            color: var(--primary-color);
            text-decoration: none;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="navbar-left">
            <a href="/" class="brand">Zoomify</a>
            <div class="user-info">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                    <circle cx="12" cy="7" r="4"></circle>
                </svg>
                <span id="username-display"></span>
            </div>
        </div>
        <div class="navbar-right">
            <div class="theme-toggle" onclick="toggleTheme()">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" 
                    stroke="currentColor" stroke-width="2" class="theme-icon">
                    <circle cx="12" cy="12" r="5"/>
                    <line x1="12" y1="1" x2="12" y2="3"/>
                </svg>
                <span>Theme</span>
            </div>
        </div>
    </nav>

    <div class="container">
        <div class="header">
            <h1>Active Rooms</h1>
            <a href="/join-room" class="back-link">Back to Join Room</a>
        </div>
        <div class="rooms-grid" id="rooms-list"></div>
    </div>

    <script>
        // Add theme toggle functions (same as join-room.ejs)
        function toggleTheme() {
            const html = document.documentElement;
            const currentTheme = html.getAttribute('data-theme');
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            html.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateThemeIcon();
        }

        function updateThemeIcon() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const themeIcon = document.querySelector('.theme-icon');
            themeIcon.innerHTML = currentTheme === 'dark' 
                ? '<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>'
                : '<circle cx="12" cy="12" r="5"/><line x1="12" y1="1" x2="12" y2="3"/>';
        }

        // Initialize theme and username
        document.addEventListener('DOMContentLoaded', () => {
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            updateThemeIcon();
            
            const username = localStorage.getItem('username');
            if (username) {
                document.getElementById('username-display').textContent = username;
            }

            // Existing rooms list update
            updateRoomsList();
            setInterval(updateRoomsList, 5000);
        });

        function updateRoomsList() {
            fetch('/api/active-rooms')
                .then(response => response.json())
                .then(rooms => {
                    const roomsList = document.getElementById('rooms-list');
                    roomsList.innerHTML = '';
                    
                    if (rooms.length === 0) {
                        roomsList.innerHTML = `
                            <div class="no-rooms">
                                <h2>No Active Rooms</h2>
                                <p>Create a new room to get started!</p>
                            </div>`;
                        return;
                    }

                    rooms.forEach(room => {
                        const card = document.createElement('div');
                        card.className = 'room-card';
                        card.innerHTML = `
                            <div class="room-info">
                                <strong>${room.name}</strong>
                                <span class="participants-count">${room.participants} participant${room.participants !== 1 ? 's' : ''}</span>
                            </div>
                            <a href="/room/${room.id}" class="join-link">Join Room</a>
                        `;
                        roomsList.appendChild(card);
                    });
                });
        }
    </script>
</body>
</html>
